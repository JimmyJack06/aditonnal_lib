/**
@defgroup VisAlign 模板匹配
*/

/**
@addtogroup VisAlign
@{
*/
#pragma once

#include "VisAlign.h"
#include "bmVisCommon.h"

/**
 * @brief 模板学习参数
*/
class VIS_2D_API bmVisAlignLearnOption {
public:
	/**
	 * @brief 设置调试
	 * @param debug log模式 默认 false
	 *		ALIGN_DEBUG_SIMPLE (512)	简单
			ALIGN_DEBUG_NORMAL (1)		正常
			ALIGN_DEBUG_DETAIL (5)		详细
			ALIGN_DEBUG_TIME (256)		时间
	 * @param path log路径
	*/
	void SetDebug(const int& debug, const std::string& path);

	/**
	* @brief 设置学习区域
	* @param coUpperLeft 左上角坐标
	* @param szWindow 大小
	* @param wdDirection 方向(横向中心线与x轴夹角，图像坐标系顺时针为正，单位度)
	*/
	void SetLearnROI(IMG_COORD coUpperLeft, IMG_SIZE szWindow,IMG_REAL wdDirection = 0);

	/**
	* @brief 获取学习区域方向
	*/
	void GetROIDirection(IMG_REAL& wdDirection);

	/**
	 * @brief 设置图像缩放等级
	 * @param ulNumOfReduction 金字塔缩放层数 默认 2
	 * @param ulHighestLayer 金字塔最高层索引 默认 0
	*/
	void SetReduction(IMG_UINT ulNumOfReduction, IMG_UINT ulHighestLayer = 0);
	
	/**
	 * @brief 设置边缘强度阈值
	 * @param ulEdgeThreshold 阈值 默认 40
	*/
	void SetEdgeMagnitude(IMG_UINT ulEdgeThreshold);

	/**
	 * @brief 设置边缘检测核大小
	 * @param ulEdgeKernelSize 核大小 默认 5
	*/
	void SetEdgeKernel(IMG_UINT ulEdgeKernelSize);
	
	/**
	 * @brief 设置学习特征数量 
	 * @param ulLearnFeatNum 特征数量 默认 100
	*/
	void SetLearnFeatNum(IMG_UINT ulLearnFeatNum);

	/**
	 * @brief 设置参考点 
	 */
	//void SetRefPoint(const IMG_RCOORD& refPoint);

	/**
	 * @brief 获取参考点 
	 */
	void GetRefPoint(IMG_RCOORD& refPoint);

	/**
	* @brief 设置预处理方式 
	* @param wPreprocessMode 预处理模式 默认0 无预处理
		ALIGN_LRN_PREPROCESS_DILATE (1)		膨胀
		ALIGN_LRN_PREPROCESS_ERODE (2)		腐蚀
		ALIGN_LRN_PREPROCESS_OPEN (3)		开
		ALIGN_LRN_PREPROCESS_CLOSE (4)		闭
		ALIGN_LRN_PREPROCESS_GAUSSIAN (5)	高斯滤波
	* @param wPreprocessKSize 预处理核大小 
	* @param rPreprocParam 预处理参数，仅进行高斯模糊时输入sigma 
	*/
	void SetPreprocInfo(IMG_WORD wPreprocessMode, IMG_WORD wPreprocessKSize, IMG_REAL rPreprocParam);

	bmVisAlignLearnOption();
	~bmVisAlignLearnOption();
	CVisAlignLearnOption* GetOption() { return option_; };
	IMG_WINDOW GetLearnRoi() { return option_->LearnInput()->stLearnROI; }

private:
	CVisAlignLearnOption* option_;
	IMG_REAL wd_dir_;
};

/**
 * @brief 模板类
*/
class VIS_2D_API bmVisAlignRecord {
public:
	bmVisAlignRecord();
	~bmVisAlignRecord();
	void SaveToFile(std::string path);
	void LoadFormFile(std::string path);
	void GetRefCoord(IMG_RCOORD& refCoord);

#ifdef VIS_2D_DLL_EXPORT
	void SetRecord(CVisAlignRecord* record);
	CVisAlignRecord* GetRecord();
#endif
private:
	CVisAlignRecord* record_;
};

/**
 * @brief 模板搜索参数
*/
class VIS_2D_API bmVisAlignSearchOption {
public:
	
	/**
	* @brief 设置调试
	* @param debug log模式 默认 false
	*		ALIGN_DEBUG_SIMPLE (512)	简单
	ALIGN_DEBUG_NORMAL (1)		正常
	ALIGN_DEBUG_DETAIL (5)		详细
	ALIGN_DEBUG_TIME (256)		时间
	* @param path log路径
	*/
	void SetDebug(const int debug, const std::string& path);
	
	/**
	 * @brief 设置 快速搜索模式
	 * @param ubFastSearch 1 开启快速搜索 0 不开启
	*/
	void SetFastSearch(IMG_UBYTE ubFastSearch);
	
	/**
	 * @brief 设置搜索区域
	 * @param coUppleft 左上角
	 * @param szOp 大小
	*/
	void SetSearchROI(IMG_COORD &coUppleft, IMG_SIZE &szOp);
	
	/**
	 * @brief 设置金字塔层数
	 * @param ubRedFactor 层数 默认 2
	*/
	void SetReduction(IMG_UBYTE ubRedFactor);
	
	/**
	 * @brief 设置边缘强度阈值
	 * @param uwEdgeThd 阈值 默认 10
	*/
	void SetEdgeThreshold(IMG_UWORD uwEdgeThd);
	
	/**
	 * @brief 设置搜索分数分数 默认0.7 （1分制）
	 * @param rAcceptLevel 
	*/
	void SetAcceptScore(IMG_REAL rAcceptLevel);
	
	/**
	 * @brief 设置粗搜索分数
	 * @param rCoarseAcceptLevel 分数 默认 0.5 （1分制）
	*/
	void SetCoarseAcceptScore(IMG_REAL rCoarseAcceptLevel);
	
	/**
	 * @brief 设置缩放比例
	 * @param rMinScale 最小缩放 默认1
	 * @param rMaxScale 最大缩放 默认1
	*/
	void SetScale(IMG_REAL rMinScale, IMG_REAL rMaxScale);
	
	/**
	 * @brief 设置搜索范围
	 * @param rMinAngle 起始角度 默认 -5
	 * @param rMaxAngle 终止角度 默认 5
	*/
	void SetAngle(IMG_REAL rMinAngle, IMG_REAL rMaxAngle);
	
	/**
	 * @brief 设置边缘角度阈值
	 * @param ubAngleMatchTolerance 阈值 默认30
	*/
	void SetPtAngleTolerance(IMG_UBYTE ubAngleMatchTolerance);
	
	/**
	 * @brief 设置边缘不规则度
	 * @param rElasticity 不规则度 默认3
	*/
	void SetElasiticity(IMG_REAL rElasticity);
	
	/**
	 * @brief 设置对象搜索模式
	 *		SRCH_MO_NEAREST				= 1,
			SRCH_MO_MULTIPLE			= 2,
			SRCH_MO_HIGHEST				= 3,
			SRCH_MO_NEAREST_OVERLAPREJ	= 4,
	 * @param MultiObj 模式 默认最高分 3
	*/
	void SetMultiObj(ALIGN_SRCH_MULTIOBJ MultiObj);
	
	/**
	 * @brief 开启完整对象
	 * @param uwCompleteObj 1开启 0 不开启 默认开启
	*/
	void SetCompleteObj(IMG_UWORD uwCompleteObj);
	
	/**
	 * @brief 开启重叠支持
	 * @param ubOverlap 1 开启 0 不开启 默认不开启
	*/
	void SetOverlap(IMG_UBYTE ubOverlap);
	
	/**
	 * @brief 重叠程度
	 * @param rOverlapScaleMargin 默认1
	*/
	void SetOverlapScaleMargin(IMG_REAL rOverlapScaleMargin);
	
	bmVisAlignSearchOption() {
		option_ = new CVisAlignSearchOption();
	}
	~bmVisAlignSearchOption() {
		if (option_) {
			//TODO
		}
	}
	CVisAlignSearchOption* GetOption() { return option_; }
private:
	CVisAlignSearchOption* option_;
};

/**
 * @brief 模板搜索结果
*/
class VIS_2D_API bmVisAlignResult {
public:

	/**
	 * @brief 对象个数
	 * @return 
	*/
	IMG_INT Size();

	/**
	 * @brief 按拟合分数排序
	*/
	void SortByFittingScore();

	/**
	 * @brief 按匹配分数排序
	*/
	void SortByMatchScore();
	
	/**
	 * @brief 按位置排序
	 * @param method 排序方式
	 *		SORT_X = 0,
	 * 		SORT_Y = 1,
	 * 		SORT_Z = 2,
	 * 		SORT_N = 3,
	*/
	void SortByPosition(POS_SORT_METHOD method);

	/**
	 * @brief 获取对象
	 * @param index 索引
	 * @return 
	*/
	IMG_OBJ* GetMatchObject(const IMG_UINT& index);

	void DrawObjInColorBuffer(IMG_UBBUF img[3], bmVisAlignRecord* record, IMG_UWORD objIndex);

	bmVisAlignResult();
	~bmVisAlignResult();
	void SetResult(CVisAlignResult* result);
private:
	CVisAlignResult* result_;
};

/**
 * @brief 圆搜索参数
*/
class VIS_2D_API bmVisAlignCircleSearchOption {
public:
	/**
	* @brief 设置调试
	* @param debug log模式 默认 false
	*		ALIGN_DEBUG_SIMPLE (512)	简单
	ALIGN_DEBUG_NORMAL (1)		正常
	ALIGN_DEBUG_DETAIL (5)		详细
	ALIGN_DEBUG_TIME (256)		时间
	* @param path log路径
	*/
	void SetDebug(const int debug, const std::string& path);

	/**
	* @brief 设置圆类型
	* @param ubCirType 0 圆 1 椭圆 默认0
	*/
	void SetCirType(IMG_UBYTE ubCirType);

	/**
	* @brief 设置半径范围
	* @param rMinScale 最小缩放 默认1
	* @param rMaxScale 最大缩放 默认1
	*/
	void SetRadius(IMG_REAL rmin, IMG_REAL rmax);

	/**
	* @brief 设置搜索区域
	* @param coUppleft 左上角
	* @param szOp 大小
	*/
	void SetSearchROI(IMG_COORD &coUppleft, IMG_SIZE &szOp);

	/**
	* @brief 设置金字塔层数
	* @param ubRedFactor 层数 默认 2
	* @param ubHighestLayer 最小层数 默认 0
	*/
	void SetReduction(IMG_UBYTE ubRedFactor, IMG_UBYTE ubHighestLayer);

	/**
	* @brief 设置边缘类型
	* @param edgeType 边缘类型 默认白到黑
	*/
	void SetEdgeType(EDGETYPE edgeType);

	/**
	* @brief 设置边缘检测核大小
	* @param uwEdgeKernel 核大小 默认5
	*/
	void SetEdgeKernel(IMG_UWORD uwEdgeKernel);

	/**
	* @brief 设置边缘强度阈值
	* @param uwEdgeThd 阈值 默认 10
	*/
	void SetEdgeThreshold(IMG_UWORD uwEdgeThd);

	/**
	* @brief 设置学习特征数量
	* @param ulLearnFeatNum 特征数量 默认 100
	*/
	void SetLearnFeatNum(IMG_UINT ulLearnFeatNum);

	/**
	* @brief 设置搜索分数分数 默认0.85 （1分制）
	* @param rAcceptLevel
	*/
	void SetAcceptScore(IMG_REAL rAcceptLevel);

	/**
	* @brief 设置粗搜索分数
	* @param rCoarseAcceptLevel 分数 默认 0.7 （1分制）
	*/
	void SetCoarseAcceptScore(IMG_REAL rCoarseAcceptLevel);

	/**
	* @brief 设置边缘角度阈值
	* @param ubAngleMatchTolerance 阈值 默认30
	*/
	void SetPtAngleTolerance(IMG_UBYTE ubAngleMatchTolerance);

	/**
	* @brief 设置边缘不规则度
	* @param rElasticity 不规则度 默认3
	*/
	void SetElasiticity(IMG_REAL rElasticity);

	/**
	* @brief 设置对象搜索模式
	*		SRCH_MO_NEAREST				= 1,
	SRCH_MO_MULTIPLE			= 2,
	SRCH_MO_HIGHEST				= 3,
	SRCH_MO_NEAREST_OVERLAPREJ	= 4,
	* @param MultiObj 模式 默认最高分 3
	*/
	void SetMultiObj(ALIGN_SRCH_MULTIOBJ MultiObj);

	/**
	* @brief 开启完整对象
	* @param uwCompleteObj 1开启 0 不开启 默认开启
	*/
	void SetCompleteObj(IMG_UWORD uwCompleteObj);

	/**
	* @brief 开启重叠支持
	* @param ubOverlap 1 开启 0 不开启 默认不开启
	*/
	void SetOverlap(IMG_UBYTE ubOverlap);

	/**
	* @brief 重叠程度
	* @param rOverlapScaleMargin 默认1
	*/
	void SetOverlapScaleMargin(IMG_REAL rOverlapScaleMargin);

	bmVisAlignCircleSearchOption();
	~bmVisAlignCircleSearchOption();
	CVisCircleSearchOption* GetOption() { return option_; }
private:
	CVisCircleSearchOption* option_;
};

/**
 * @brief 圆搜索结果
*/
class VIS_2D_API bmVisAlignCircleResult {
public:

	/**
	 * @brief 对象个数
	 * @return 
	*/
	IMG_UINT Size();
	/**
	 * @brief 获取圆/椭圆对象
	 * @param index 索引
	 * @return 
	*/
	IMG_CIRCLE_OBJ *GetIMG_CIRCLE_OBJ(const IMG_UINT& index);

	bmVisAlignCircleResult();
	~bmVisAlignCircleResult();
	void SetResult(CVisCircleResult* result);
private:
	CVisCircleResult* result_;
};

/** @example bmVisAlign/testBmVisAlign.hpp
An example using Template Matching algorithm
*/
/**
 * @brief 模板学习
 * @param learnImage 图像
 * @param learnOption 参数
 * @param record 结果模板
 * @return code 0 ok -1 error
*/
VIS_2D_API bmvis_status bmvis_align_learn(IMG_UBBUF* learnImage, bmVisAlignLearnOption* learnOption, bmVisAlignRecord* record, IMG_UBBUF* maskImage = nullptr);

/**
 * @brief 模板搜索
 * @param searchImage 搜索图像
 * @param record “bmvis_align_learn”学习到的模板
 * @param searchOption 搜索参数
 * @param result 搜索结果
 * @return code 0 ok -1 error
*/
VIS_2D_API bmvis_status bmvis_align_search(IMG_UBBUF* searchImage,bmVisAlignRecord* record, bmVisAlignSearchOption* searchOption, bmVisAlignResult* result, IMG_UBBUF* maskImage = nullptr);

/**
 * @brief 搜索圆
 * @param searchImage 搜索图像
 * @param searchOption 搜索参数
 * @param result 结果
 * @return code 0 ok -1 error
*/
VIS_2D_API bmvis_status bmvis_align_search_circle(IMG_UBBUF* searchImage, bmVisAlignCircleSearchOption* searchOption, bmVisAlignCircleResult* result, IMG_UBBUF* maskImage = nullptr);

/**
* @brief 根据匹配结果转换点集
* @param dstPoints 结果
* @param srcPoints 输入点集
* @param npoint 点数量
* @param obj 匹配对象
* @param refCor 参考点
* @return code 0 ok -1 error
*/
VIS_2D_API bmvis_status bmvis_align_trans_by_match_object(IMG_RCOORD* dstPoints, const IMG_RCOORD* srcPoints, const IMG_UINT& npoint,const IMG_OBJ* obj, const IMG_RCOORD& refCor = {0,0});

/**
* @brief 根据匹配结果转换点集
* @param srcdstPoints 点集
* @param npoint 点数量
* @param obj 匹配对象
* @param refCor 参考点
* @return code 0 ok -1 error
*/
VIS_2D_API bmvis_status bmvis_align_trans_by_match_object(IMG_RCOORD* srcdstPoints, const IMG_UINT& npoint,const IMG_OBJ* obj, const IMG_RCOORD& refCor = { 0,0 });

/**
* @brief 根据匹配结果转换点
* @param srcPt 点
* @param record record
* @param res 搜索结果
* @param dstPt 目标点
*/
VIS_2D_API bmvis_status bmvis_align_convert(IMG_RCOORD srcPt, bmVisAlignRecord *record, bmVisAlignResult*res, IMG_RCOORD &dstPt);

/**
* @brief 匹配粗定位
* @param ubbufImg 输入图像
* @param dstRoi 输出roi
*/
VIS_2D_API bmvis_status bmvis_align_coarse(IMG_UBBUF *ubbufImg, IMG_WINDOW &dstRoi, bool backgroundIsWhite = true);

/**
* @brief 学习特征显示
* @param ubbufImg 输入输出图像
* @param record 学习模板
*/
VIS_2D_API bmvis_status bmvis_align_learnshow(IMG_UBBUF* learnImage, bmVisAlignRecord* record, IMG_WINDOW learnRoi, std::vector<IMG_RCOORD>&vecPoints);

/**
* @brief 图像模板匹配
* @param srcImage 输入图像
* @param srcRoi 输入roi
* @param srcImage 模板图像
* @param tplImage 模板roi
* @param dstImage 输出图像
*/
VIS_2D_API bmvis_status bmvis_align_imagematch(IMG_UBBUF *srcImage, const IMG_WINDOW &srcRoi, IMG_UBBUF *tplImage, const IMG_WINDOW &tplRoi, IMG_RBUF *dstImage);
/**
* @brief 图像模板匹配
* @param srcImage 输入图像
* @param srcRoi 输入roi
* @param srcImage 模板图像
* @param tplImage 模板roi
* @param dstCoor 位置
*/
VIS_2D_API bmvis_status bmvis_align_imagematch(IMG_UBBUF *srcImage, const IMG_WINDOW &srcRoi, IMG_UBBUF *tplImage, const IMG_WINDOW &tplRoi, IMG_COORD &dstCoor);

//! @} VisAlign
